import java.util.*;
import java.util.concurrent.*;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.stream.Collectors;

public class PrimeNumberGenerator {

    private static final Random random = new Random();

    // Функция для генерации случайного числа в заданном диапазоне
    public static int randomGenerator(int min, int max) {
        return random.nextInt(max - min + 1) + min;
    }

    // Функция для модульного возведения в степень
    public static long mod(long number, long power, long n) {
        long result = 1;
        while (power > 0) {
            if (power % 2 != 0) {
                result = (result * number) % n;
            }
            power /= 2;
            number = (number * number) % n;
        }
        return result;
    }

    // Простая функция для проверки простоты числа
    public static boolean isPrime(int number, List<Integer> primes) {
        for (int prime : primes) {
            if (number % prime == 0) {
                return false;
            }
        }
        return true;
    }

    // Проверка числа на простоту через решето Эратосфена
    public static List<Integer> eratosthenesSieve(int limit) {
        List<Integer> primes = new ArrayList<>();
        primes.add(2);
        for (int i = 3; i < limit; i += 2) {
            if (isPrime(i, primes)) {
                primes.add(i);
            }
        }
        return primes;
    }

    // Функция для проверки теоремы Ферма
    public static boolean fermatTheorem(int a, int x, int p) {
        return mod(a, x, p) == 1;
    }

    public static int generateN(int k, int q, int e) {
        int N = (int) (Math.ceil((double) Math.pow(2, k - 1) / q) + Math.ceil((double) (Math.pow(2, k - 1) * e) / q));
        if (N % 2 != 0) {
            N += 1;
        }
        return N;
    }

    // Тест ГОСТ на простоту
    public static boolean gostTest(long n, int t, int N, int u) {
        for (int i = 0; i < t; i++) {
            if (!fermatTheorem(2, (int) (n - 1), (int) n)) {
                return false; // n - составное число
            }

            if (fermatTheorem(2, N + u, (int) n)) {
                return false; // n - составное число
            }
        }
        return true; // n - простое число
    }

    // Функция для вычисления количества бит в числе
    public static int countBits(long number) {
        return Long.SIZE - Long.numberOfLeadingZeros(number);
    }

    // Функция для проверки, является ли число меньше или больше заданного количества бит
    public static int isWithinBitRange(int number, int bitCount, int formin) {
        int numBits = countBits(number);
        if (numBits < bitCount - formin) return 1; // Число меньше заданного количества бит
        if (numBits > bitCount + formin) return 2; // Число больше заданного количества бит
        return 3; // Число равно заданному количеству бит
    }

    // Функция для создания числа и проведения тестов
    public static boolean createNum(int k, List<Integer> numbers, List<String> plusminus, List<Integer> oshibki, List<Double> errorProbabilities, AtomicBoolean shouldStop, List<Integer> primes) {
        int q = 0; // Инициализация переменной q
        int N = 0; // Инициализация переменной N
        int u = 0;
        int e = 0;
        int n = 0; // Инициализация переменной n
        int tempq = k / 2; // Целевое количество бит для числа q
        int tempOshibki = 0;
        int formin = 0;
        if (k < 10 && k > 5) {
            formin = 1;
        } else if (k <= 5) {
            formin = 2;
        }

        while (!shouldStop.get()) { // генерация числа m в заданном диапазоне битов
            q = primes.get(randomGenerator(0, primes.size() - 1));
            if (isWithinBitRange(q, tempq, formin) == 3) {
                N = generateN(k, q, e);
                n = (N + u) * q + 1;
                if (isWithinBitRange(n, k, formin) != 2) {
                    if (gostTest(n, 1, N, u)) {
                        break;
                    } else {
                        u += 2;
                        tempOshibki++;
                    }
                }
            }
        }

        if (shouldStop.get()) return false;

        // Проверка на уникальность числа и повторная генерация, если число уже существует
        while (!numbers.isEmpty() && numbers.contains(n)) {
            while (!shouldStop.get()) { // генерация числа m в заданном диапазоне битов
                q = primes.get(randomGenerator(0, primes.size() - 1));
                if (isWithinBitRange(q, tempq, formin) == 3) {
                    N = generateN(k, q, e);
                    n = (N + u) * q + 1;
                    if (isWithinBitRange(n, k, formin) != 2) {
                        if (gostTest(n, 1, N, u)) {
                            break;
                        } else {
                            u += 2;
                            tempOshibki++;
                        }
                    }
                }
            }
            if (shouldStop.get()) return false;
        }

        if (shouldStop.get()) return false;

        int tempOshibki2 = 0;
        int i;
        int iter = 1;
        while (!shouldStop.get()) {
            // Проверяем n на простоту с помощью теста ГОСТ
            for (i = 0; i < 100; i++) {
                if (!gostTest(n, iter, N, u)) {
                    tempOshibki2++;
                }
            }
            if (tempOshibki2 <= i / 10) {
                break;
            } else {
                tempOshibki2 = 0;
                iter++;
            }
        }
        if (shouldStop.get()) return false;

        numbers.add(n);
        if (tempOshibki2 <= 10) {
            plusminus.add("+");
        } else {
            plusminus.add("-");
        }
        oshibki.add(tempOshibki);
        errorProbabilities.add(1.0 / q); // Вычисление вероятности ошибки
        return true; // Число успешно добавлено
    }

    // Функция для ввода одного слова с проверкой
    public static int getSingleWordInput(String prompt) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.print(prompt);
            String input = scanner.nextLine();

            // Проверка на количество слов
            if (input.split("\\s+").length != 1) {
                System.out.println("Неправильное количество. Пожалуйста, введите одно число.");
                continue;
            }

            // Проверка на корректность числа
            try {
                int value = Integer.parseInt(input);
                if (value < 4 || value > 20) {
                    System.out.println("Некорректное число. Попробуйте снова.");
                    continue;
                }
                return value;
            } catch (NumberFormatException e) {
                System.out.println("Некорректное число. Попробуйте снова.");
            }
        }
    }

    public static void main(String[] args) {
        List<Integer> numbers = new ArrayList<>();
        List<String> plusminus = new ArrayList<>();
        List<Integer> oshibki = new ArrayList<>();
        List<Double> errorProbabilities = new ArrayList<>(); // Вектор для хранения вероятностей ошибок
        int length = 0;
        int input;

        while (true) {
            // Ввод значений с проверкой на количество слов и корректность числа
            input = getSingleWordInput("Введите размерность простого числа \n");
            break; // Если проверки пройдены, выходим из цикла
        }

        length = input;

        // Вывод результатов метода Эратосфена
        List<Integer> primes = eratosthenesSieve(500);
        System.out.println("Простые числа до 500 (Решето Эратосфена):");
        System.out.println(primes.stream().map(Object::toString).collect(Collectors.joining(" ")));
        System.out.println();

        int i = 0;
        ExecutorService executor = Executors.newSingleThreadExecutor();
        while (i < 10) {
            AtomicBoolean shouldStop = new AtomicBoolean(false);
            int finalLength = length; // Создаем локальную копию length
            List<Integer> finalNumbers = new ArrayList<>(numbers); // Создаем локальную копию numbers
            List<String> finalPlusminus = new ArrayList<>(plusminus); // Создаем локальную копию plusminus
            List<Integer> finalOshibki = new ArrayList<>(oshibki); // Создаем локальную копию oshibki
            List<Double> finalErrorProbabilities = new ArrayList<>(errorProbabilities); // Создаем локальную копию errorProbabilities
            List<Integer> finalPrimes = new ArrayList<>(primes); // Создаем локальную копию primes

            Future<Boolean> future = executor.submit(() -> createNum(finalLength, finalNumbers, finalPlusminus, finalOshibki, finalErrorProbabilities, shouldStop, finalPrimes));

            try {
                Thread.sleep(5);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }

            shouldStop.set(true);
            try {
                if (future.get()) {
                    i++;
                    numbers = finalNumbers; // Обновляем оригинальные списки
                    plusminus = finalPlusminus;
                    oshibki = finalOshibki;
                    errorProbabilities = finalErrorProbabilities;
                }
            } catch (InterruptedException | ExecutionException e) {
                e.printStackTrace();
            }
        }
        executor.shutdown();

        // Добавляем фразу перед выводом 10 чисел
        System.out.println("Простые числа, созданные с помощью теста ГОСТ:");
        System.out.println("| Num | " + String.format("%5d | %5d | %5d | %5d | %5d | %5d | %5d | %5d | %5d | %5d |", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10));
        System.out.println(" ");
        System.out.println("|  P  | " + String.format("%5d | %5d | %5d | %5d | %5d | %5d | %5d | %5d | %5d | %5d |", numbers.toArray()));
        System.out.println(" ");
        System.out.println("| Res | " + String.format("%5s | %5s | %5s | %5s | %5s | %5s | %5s | %5s | %5s | %5s |", plusminus.toArray()));
        System.out.println(" ");
        System.out.println("|  K  | " + String.format("%5d | %5d | %5d | %5d | %5d | %5d | %5d | %5d | %5d | %5d |", oshibki.toArray()));
        System.out.println(" ");
        System.out.println("| Err | " + String.format("%5.3f | %5.3f | %5.3f | %5.3f | %5.3f | %5.3f | %5.3f | %5.3f | %5.3f | %5.3f |", errorProbabilities.toArray()));
    }
}
